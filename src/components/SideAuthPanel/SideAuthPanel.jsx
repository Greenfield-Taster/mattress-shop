import React, { useState } from 'react';
import { useAuth } from '../../hooks/useAuth';
import './SideAuthPanel.scss';

const SideAuthPanel = ({ isOpen = false, onClose }) => {
  const [authStep, setAuthStep] = useState('phone'); // 'phone' | 'code'
  const [phoneNumber, setPhoneNumber] = useState('');
  const [code, setCode] = useState(['', '', '', '', '', '']);
  const [error, setError] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const { sendCode, login, loginWithGoogle } = useAuth();

  const handlePhoneChange = (e) => {
    setError('');
    const value = e.target.value.replace(/\D/g, '');
    if (value.length <= 9) {
      setPhoneNumber(value);
    }
  };

  const handleCodeChange = (index, value) => {
    if (value.length > 1) return;
    
    setError('');
    const newCode = [...code];
    newCode[index] = value;
    setCode(newCode);

    // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–ª–µ
    if (value && index < 5) {
      const nextInput = document.getElementById(`code-${index + 1}`);
      if (nextInput) nextInput.focus();
    }
  };

  const handleCodeKeyDown = (index, e) => {
    if (e.key === 'Backspace' && !code[index] && index > 0) {
      const prevInput = document.getElementById(`code-${index - 1}`);
      if (prevInput) prevInput.focus();
    }
  };

  const handleResendCode = async () => {
    setError('');
    setIsSubmitting(true);

    const result = await sendCode('+380' + phoneNumber);
    
    setIsSubmitting(false);

    if (result.success) {
      // –ú–æ–∂–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø—Ä–∞–≤–∫—É
      console.log('Code sent successfully');
    } else {
      setError(result.error || '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–¥—É');
    }
  };

  const handleGoogleAuth = async () => {
    setError('');
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google OAuth
    if (window.google) {
      window.google.accounts.id.initialize({
        client_id: import.meta.env.VITE_GOOGLE_CLIENT_ID,
        callback: handleGoogleCallback
      });
      window.google.accounts.id.prompt();
    } else {
      setError('Google OAuth –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
    }
  };

  const handleGoogleCallback = async (response) => {
    setIsSubmitting(true);
    
    const result = await loginWithGoogle(response.credential);
    
    setIsSubmitting(false);

    if (result.success) {
      onClose();
      // –°–∫–∏–Ω—É—Ç–∏ —Ñ–æ—Ä–º—É
      resetForm();
    } else {
      setError(result.error || '–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ Google');
    }
  };

  const handleSubmitPhone = async () => {
    if (phoneNumber.length !== 9) return;

    setError('');
    setIsSubmitting(true);

    const result = await sendCode('+380' + phoneNumber);
    
    setIsSubmitting(false);

    if (result.success) {
      setAuthStep('code');
    } else {
      setError(result.error || '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–¥—É');
    }
  };

  const handleSubmitCode = async () => {
    const fullCode = code.join('');
    if (fullCode.length !== 6) return;

    setError('');
    setIsSubmitting(true);

    const result = await login('+380' + phoneNumber, fullCode);
    
    setIsSubmitting(false);

    if (result.success) {
      onClose();
      // –°–∫–∏–Ω—É—Ç–∏ —Ñ–æ—Ä–º—É
      resetForm();
    } else {
      setError(result.error || '–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥');
    }
  };

  const handleBackToPhone = () => {
    setAuthStep('phone');
    setCode(['', '', '', '', '', '']);
    setError('');
  };

  const resetForm = () => {
    setAuthStep('phone');
    setPhoneNumber('');
    setCode(['', '', '', '', '', '']);
    setError('');
    setIsSubmitting(false);
  };

  // –°–∫–∏–Ω—É—Ç–∏ —Ñ–æ—Ä–º—É –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ
  const handleClose = () => {
    resetForm();
    onClose();
  };

  return (
    <>
      {/* Backdrop */}
      <div 
        className={`auth-backdrop ${isOpen ? 'active' : ''}`}
        onClick={handleClose}
        aria-hidden="true"
      />

      {/* Side Panel */}
      <aside className={`side-auth-panel ${isOpen ? 'open' : ''}`}>
        {/* Close Button */}
        <button 
          className="close-btn" 
          onClick={handleClose} 
          aria-label="–ó–∞–∫—Ä–∏—Ç–∏"
          type="button"
        >
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
            <path 
              d="M18 6L6 18M6 6L18 18" 
              stroke="currentColor" 
              strokeWidth="2" 
              strokeLinecap="round"
            />
          </svg>
        </button>

        {/* Logo / Header */}
        <div className="auth-header">
          <div className="logo-icon">üõèÔ∏è</div>
          <h2 className="auth-title">–í—ñ—Ç–∞—î–º–æ –≤ Mattress Shop</h2>
          <p className="auth-subtitle">
            {authStep === 'phone' 
              ? '–£–≤—ñ–π–¥—ñ—Ç—å –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç' 
              : '–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∑ SMS'}
          </p>
        </div>

        {/* Auth Content */}
        <div className="auth-content">
          {/* Error Message */}
          {error && (
            <div className="error-message">
              <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                <path 
                  d="M10 18C14.4183 18 18 14.4183 18 10C18 5.58172 14.4183 2 10 2C5.58172 2 2 5.58172 2 10C2 14.4183 5.58172 18 10 18Z" 
                  stroke="currentColor" 
                  strokeWidth="2"
                />
                <path 
                  d="M10 6V10M10 14H10.01" 
                  stroke="currentColor" 
                  strokeWidth="2" 
                  strokeLinecap="round"
                />
              </svg>
              <span>{error}</span>
            </div>
          )}

          {authStep === 'phone' ? (
            <>
              {/* Phone Input */}
              <div className="input-group">
                <label htmlFor="phone" className="input-label">
                  –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
                </label>
                <div className="phone-input-wrapper">
                  <span className="phone-prefix">+380</span>
                  <input
                    type="tel"
                    id="phone"
                    className="input-field phone-input"
                    placeholder="XX XXX XX XX"
                    value={phoneNumber}
                    onChange={handlePhoneChange}
                    maxLength={9}
                    autoComplete="tel"
                    disabled={isSubmitting}
                  />
                </div>
              </div>

              {/* Submit Button */}
              <button 
                className="btn btn-primary"
                onClick={handleSubmitPhone}
                disabled={phoneNumber.length !== 9 || isSubmitting}
                type="button"
              >
                <span>{isSubmitting ? '–í—ñ–¥–ø—Ä–∞–≤–∫–∞...' : '–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–¥'}</span>
                {!isSubmitting && (
                  <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                    <path 
                      d="M7.5 15L12.5 10L7.5 5" 
                      stroke="currentColor" 
                      strokeWidth="2" 
                      strokeLinecap="round" 
                      strokeLinejoin="round"
                    />
                  </svg>
                )}
              </button>

              {/* Divider */}
              <div className="divider">
                <span>–∞–±–æ</span>
              </div>

              {/* Google Auth Button */}
              <button 
                className="btn btn-google"
                onClick={handleGoogleAuth}
                type="button"
                disabled={isSubmitting}
              >
                <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                  <path 
                    d="M18.1711 8.36788H9.99976V11.8477H14.7075C14.3104 13.7673 12.5459 15.0186 9.99976 15.0186C7.09648 15.0186 4.74484 12.667 4.74484 9.76367C4.74484 6.86039 7.09648 4.50879 9.99976 4.50879C11.3142 4.50879 12.5061 5.00254 13.4052 5.8177L16.0034 3.21948C14.4681 1.82967 12.3547 1.02881 9.99976 1.02881C5.1757 1.02881 1.26489 4.93962 1.26489 9.76367C1.26489 14.5877 5.1757 18.4985 9.99976 18.4985C14.5399 18.4985 18.2504 15.1477 18.2504 9.76367C18.2504 9.29195 18.2201 8.82256 18.1711 8.36788Z" 
                    fill="#4285F4"
                  />
                </svg>
                <span>–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑ Google</span>
              </button>
            </>
          ) : (
            <>
              {/* Back Button */}
              <button 
                className="back-btn"
                onClick={handleBackToPhone}
                type="button"
                disabled={isSubmitting}
              >
                <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                  <path 
                    d="M12.5 15L7.5 10L12.5 5" 
                    stroke="currentColor" 
                    strokeWidth="2" 
                    strokeLinecap="round" 
                    strokeLinejoin="round"
                  />
                </svg>
                <span>–ù–∞–∑–∞–¥</span>
              </button>

              {/* Phone Number Display */}
              <div className="phone-display">
                <span className="phone-display-label">–ö–æ–¥ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞:</span>
                <span className="phone-display-number">+380 {phoneNumber}</span>
              </div>

              {/* Code Inputs */}
              <div className="code-input-group">
                <label className="input-label">
                  –ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
                </label>
                <div className="code-inputs">
                  {code.map((digit, idx) => (
                    <input
                      key={idx}
                      id={`code-${idx}`}
                      type="text"
                      inputMode="numeric"
                      pattern="[0-9]*"
                      className="code-input"
                      maxLength={1}
                      value={digit}
                      onChange={(e) => handleCodeChange(idx, e.target.value)}
                      onKeyDown={(e) => handleCodeKeyDown(idx, e)}
                      autoComplete="one-time-code"
                      disabled={isSubmitting}
                    />
                  ))}
                </div>
              </div>

              {/* Resend Code */}
              <div className="resend-wrapper">
                <span className="resend-text">–ù–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –∫–æ–¥?</span>
                <button 
                  className="resend-btn"
                  onClick={handleResendCode}
                  type="button"
                  disabled={isSubmitting}
                >
                  {isSubmitting ? '–í—ñ–¥–ø—Ä–∞–≤–∫–∞...' : '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ'}
                </button>
              </div>

              {/* Submit Button */}
              <button 
                className="btn btn-primary"
                onClick={handleSubmitCode}
                disabled={code.join('').length !== 6 || isSubmitting}
                type="button"
              >
                <span>{isSubmitting ? '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞...' : '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏'}</span>
                {!isSubmitting && (
                  <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                    <path 
                      d="M16.6668 5L7.50016 14.1667L3.3335 10" 
                      stroke="currentColor" 
                      strokeWidth="2" 
                      strokeLinecap="round" 
                      strokeLinejoin="round"
                    />
                  </svg>
                )}
              </button>
            </>
          )}
        </div>

        {/* Footer */}
        <div className="auth-footer">
          <p className="footer-text">
            –ü—Ä–æ–¥–æ–≤–∂—É—é—á–∏, –≤–∏ –ø—Ä–∏–π–º–∞—î—Ç–µ –Ω–∞—à—ñ{' '}
            <a href="/terms" className="footer-link">
              –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
            </a>
            {' '}—Ç–∞{' '}
            <a href="/privacy" className="footer-link">
              –ü–æ–ª—ñ—Ç–∏–∫—É –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ
            </a>
          </p>
        </div>
      </aside>
    </>
  );
};

export default SideAuthPanel;
