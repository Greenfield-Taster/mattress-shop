import React, { useState, useEffect } from "react";
import { useSearchParams } from "react-router-dom";
import ProductCard from "../components/ProductCard/ProductCard";
import CatalogFilters from "../components/CatalogFilters/CatalogFilters";
import CustomSelect from "../components/CustomSelect/CustomSelect";
import { fetchProducts } from "../api/fetchProducts";
import "../styles/pages/_catalog.scss";

/**
 * –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∫–∞—Ç–∞–ª–æ–≥—É –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é, —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è–º —Ç–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
 *
 * –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞:
 * - URL —è–∫ –¥–∂–µ—Ä–µ–ª–æ –ø—Ä–∞–≤–¥–∏ (query params)
 * - –°–µ—Ä–≤–µ—Ä–Ω–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
 * - Sticky sidebar –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
 * - –ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π layout
 */
const Catalog = () => {
  // URL query params - –¥–∂–µ—Ä–µ–ª–æ –ø—Ä–∞–≤–¥–∏
  const [searchParams, setSearchParams] = useSearchParams();

  // –°—Ç–∞–Ω –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
  const [products, setProducts] = useState([]);
  const [total, setTotal] = useState(0);
  const [loading, setLoading] = useState(false);

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∑ URL
   */
  const parseParams = () => {
    const params = {
      types: searchParams.get("types")?.split(",").filter(Boolean) || [],
      sizes: searchParams.get("sizes")?.split(",").filter(Boolean) || [],
      blockTypes:
        searchParams.get("blockTypes")?.split(",").filter(Boolean) || [],
      fillers: searchParams.get("fillers")?.split(",").filter(Boolean) || [],
      covers: searchParams.get("covers")?.split(",").filter(Boolean) || [],
      height: searchParams.get("height") || "3-45",
      maxWeight: searchParams.get("maxWeight") || "<=250",
      price: searchParams.get("price") || "0-50000",
      sort: searchParams.get("sort") || "default",
      page: parseInt(searchParams.get("page")) || 1,
      limit: parseInt(searchParams.get("limit")) || 12,
    };
    return params;
  };

  const params = parseParams();

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
   *
   * üîÑ –ö–û–õ–ò –ü–Ü–î–ö–õ–Æ–ß–ê–¢–ò–ú–ï–® –°–ï–†–í–ï–†:
   * –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤–∂–µ –≥–æ—Ç–æ–≤–∞ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ —Å–µ—Ä–≤–µ—Ä–Ω–∏–º API
   * fetchProducts –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç—å –≤—Å—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
   */
  useEffect(() => {
    const loadProducts = async () => {
      setLoading(true);
      try {
        const result = await fetchProducts(params);
        setProducts(result.items);
        setTotal(result.total);
      } catch (error) {
        console.error("Error loading products:", error);
        // üîÑ –ù–ê –°–ï–†–í–ï–†–Ü: –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫ (toast, notification)
      } finally {
        setLoading(false);
      }
    };

    loadProducts();
  }, [searchParams]); // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–∏ –∑–º—ñ–Ω—ñ URL

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è URL –∑ –Ω–æ–≤–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
   */
  const updateURL = (newParams) => {
    const query = new URLSearchParams();

    Object.entries(newParams).forEach(([key, value]) => {
      if (value !== null && value !== undefined && value !== "") {
        // –î–ª—è –º–∞—Å–∏–≤—ñ–≤
        if (Array.isArray(value) && value.length > 0) {
          query.set(key, value.join(","));
        }
        // –î–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å - –Ω–µ –¥–æ–¥–∞—î–º–æ –≤ URL
        else if (
          (key === "height" && value === "3-45") ||
          (key === "maxWeight" && value === "<=250") ||
          (key === "price" && value === "0-50000") ||
          (key === "sort" && value === "default") ||
          (key === "page" && value === 1) ||
          (key === "limit" && value === 12)
        ) {
          // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
        }
        // –î–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö
        else {
          query.set(key, value);
        }
      }
    });

    setSearchParams(query);
  };

  /**
   * –û–±—Ä–æ–±–Ω–∏–∫ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
   */
  const handleApplyFilters = (newFilters) => {
    updateURL({
      ...newFilters,
      page: 1, // –°–∫–∏–¥–∞—î–º–æ –Ω–∞ –ø–µ—Ä—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
    });
  };

  /**
   * –û–±—Ä–æ–±–Ω–∏–∫ –æ—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
   */
  const handleClearAll = () => {
    setSearchParams({}); // –ü–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—â–∞—î–º–æ URL
  };

  /**
   * –û–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
   */
  const handleSortChange = (sortValue) => {
    updateURL({
      ...params,
      sort: sortValue,
      page: 1,
    });
  };

  /**
   * –û–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
   */
  const handlePageChange = (newPage) => {
    updateURL({
      ...params,
      page: newPage,
    });

    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –ø–æ—á–∞—Ç–∫—É –∫–∞—Ç–∞–ª–æ–≥—É
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  };

  // –û–ø—Ü—ñ—ó –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
  const sortOptions = [
    { value: "default", label: "–ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º" },
    { value: "price-asc", label: "–°–ø–æ—á–∞—Ç–∫—É –¥–µ—à–µ–≤—à—ñ" },
    { value: "price-desc", label: "–°–ø–æ—á–∞—Ç–∫—É –¥–æ—Ä–æ–∂—á—ñ" },
    { value: "popular", label: "–ü–æ–ø—É–ª—è—Ä–Ω—ñ" },
    { value: "new", label: "–ù–æ–≤–∏–Ω–∫–∏" },
    { value: "discount", label: "–ó—ñ –∑–Ω–∏–∂–∫–æ—é" },
  ];

  // –û–ø—Ü—ñ—ó —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  const filterOptions = {
    types: ["–ë–µ–∑–ø—Ä—É–∂–∏–Ω–Ω—ñ", "–ü—Ä—É–∂–∏–Ω–Ω—ñ", "–î–∏—Ç—è—á—ñ", "–¢–æ–ø–µ—Ä–∏", "–°–∫—Ä—É—á–µ–Ω—ñ"],
    sizes: [
      "200—Ö200",
      "180—Ö200",
      "180—Ö190",
      "170—Ö200",
      "170—Ö190",
      "160—Ö200",
      "160—Ö190",
      "150—Ö200",
      "150—Ö190",
      "140—Ö200",
      "140—Ö190",
      "120—Ö200",
      "120—Ö190",
      "90—Ö200",
      "90—Ö190",
      "80—Ö200",
      "80—Ö190",
      "70—Ö200",
      "70—Ö190",
      "80—Ö180",
      "80—Ö170",
      "80—Ö160",
      "80—Ö150",
      "70—Ö180",
      "70—Ö170",
      "70—Ö160",
      "70—Ö150",
      "60—Ö120",
      "–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ä–æ–∑–º—ñ—Ä",
    ],
    blockTypes: ["–ë–µ–∑–ø—Ä—É–∂–∏–Ω–Ω–∏–π", "–ù–µ–∑–∞–ª–µ–∂–Ω–∏–π –ø—Ä—É–∂–∏–Ω–Ω–∏–π –±–ª–æ–∫"],
    fillers: [
      "–õ–∞—Ç–µ–∫—Å",
      "–õ–∞—Ç–µ–∫—Å–æ–≤–∞–Ω–∞ –ø—ñ–Ω–∞",
      "–ü—ñ–Ω–∞ –∑ –ø–∞–º'—è—Ç—Ç—é",
      "–ö–æ–∫–æ—Å–æ–≤–µ –ø–æ–ª–æ—Ç–Ω–æ",
    ],
    covers: ["–ó–Ω—ñ–º–Ω–∏–π", "–ù–µ–∑–Ω—ñ–º–Ω–∏–π"],
  };

  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
  const totalPages = Math.ceil(total / params.limit);

  return (
    <div className="catalog">
      <div className="catalog__container">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —ñ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è */}
        <div className="catalog__header">
          <h1 className="catalog__title">–ö–∞—Ç–∞–ª–æ–≥ –º–∞—Ç—Ä–∞—Ü—ñ–≤</h1>
          <div className="catalog__controls">
            <div className="catalog__sort">
              <span className="catalog__sort-label">–°–æ—Ä—Ç—É–≤–∞—Ç–∏:</span>
              <CustomSelect
                value={params.sort}
                onChange={handleSortChange}
                options={sortOptions}
              />
            </div>
            <p className="catalog__count">–ó–Ω–∞–π–¥–µ–Ω–æ: {total} —Ç–æ–≤–∞—Ä—ñ–≤</p>
          </div>
        </div>

        <div className="catalog__content">
          {/* –§—ñ–ª—å—Ç—Ä–∏ */}
          <aside className="catalog__filters">
            <CatalogFilters
              params={params}
              onApply={handleApplyFilters}
              onClearAll={handleClearAll}
              filterOptions={filterOptions}
            />
          </aside>

          {/* –°—ñ—Ç–∫–∞ —Ç–æ–≤–∞—Ä—ñ–≤ */}
          <div className="catalog__products">
            {loading ? (
              <div className="catalog__loader">
                <div className="loader-spinner"></div>
                <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤...</p>
              </div>
            ) : products.length > 0 ? (
              <>
                <div className="products-grid">
                  {products.map((product) => (
                    <ProductCard key={product.id} product={product} />
                  ))}
                </div>

                {/* –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è */}
                {totalPages > 1 && (
                  <div className="catalog__pagination">
                    <button
                      className="pagination__button"
                      onClick={() => handlePageChange(params.page - 1)}
                      disabled={params.page === 1}
                    >
                      ‚Äπ
                    </button>

                    {[...Array(totalPages)].map((_, index) => {
                      const pageNum = index + 1;
                      // –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –¥–µ—è–∫—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
                      if (
                        pageNum === 1 ||
                        pageNum === totalPages ||
                        (pageNum >= params.page - 1 &&
                          pageNum <= params.page + 1)
                      ) {
                        return (
                          <button
                            key={pageNum}
                            className={`pagination__button ${
                              params.page === pageNum
                                ? "pagination__button--active"
                                : ""
                            }`}
                            onClick={() => handlePageChange(pageNum)}
                          >
                            {pageNum}
                          </button>
                        );
                      } else if (
                        pageNum === params.page - 2 ||
                        pageNum === params.page + 2
                      ) {
                        return <span key={pageNum}>...</span>;
                      }
                      return null;
                    })}

                    <button
                      className="pagination__button"
                      onClick={() => handlePageChange(params.page + 1)}
                      disabled={params.page === totalPages}
                    >
                      ‚Ä∫
                    </button>
                  </div>
                )}
              </>
            ) : (
              <div className="catalog__empty">
                <h2>–¢–æ–≤–∞—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h2>
                <p>–°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó</p>
                <button
                  onClick={handleClearAll}
                  className="catalog__empty-button"
                >
                  –°–∫–∏–Ω—É—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Catalog;
